// Generated by CoffeeScript 2.7.0
(function() {
  var AxiosApi, Builders, Promise, Request, Response, Validator, _, config, fs, https, path, util;

  _ = require('underscore');

  fs = require('fs');

  path = require('path');

  util = require('util');

  config = require('config');

  https = require('https');

  Response = require('./response');

  Promise = require('bluebird');

  Builders = require('./builders/builders');

  AxiosApi = require('./network/axios_api');

  Validator = require('./transactions/validator');

  Request = (function() {
    var ENVIRONMENT_PREFIX_PRODUCTION, ENVIRONMENT_PREFIX_STAGING;

    class Request {
      constructor(builderInterface = 'xml') {
        this.builderInterface = builderInterface;
        this.builderContext = new Builders(this.builderInterface);
        this.response = new Response();
      }

      initConfiguration() {
        return this.loadBuilderInterface();
      }

      getArguments() {}

      loadBuilderInterface() {
        switch (this.builderInterface) {
          case 'xml':
            return this.initXmlConfiguration();
          case 'form':
            return this.initFormConfiguration();
        }
      }

      /*
        Format and return the endpoint URL based on the transaction parameters
      */
      formatUrl(params) {
        if (params.token) {
          return util.format('%s://%s%s.%s/%s/%s', config.gateway.protocol, this.getURLEnvironment(), params.app, config.gateway.hostname, params.path, params.token);
        } else {
          return util.format('%s://%s%s.%s/%s', config.gateway.protocol, this.getURLEnvironment(), params.app, config.gateway.hostname, params.path);
        }
      }

      /*
        Send the transaction to the Gateway
      */
      send() {
        var axiosApi, data, params, requestConfig;
        if (!this.isValid()) {
          return Promise.reject(this.getValidationErrorResponse());
        }
        params = this.getArguments();
        requestConfig = this.initConfiguration(this.builderInterface);
        data = this.builderContext.getBuilder(params.trx);
        axiosApi = new AxiosApi();
        return axiosApi.request_query(this.formatUrl(params.url), requestConfig, data);
      }

      initXmlConfiguration() {
        return {
          method: this.METHOD_POST,
          httpsAgent: new https.Agent({
            rejectUnauthorized: true,
            maxVersion: "TLSv1.2",
            minVersion: "TLSv1.2"
          }),
          headers: {
            'Content-Type': 'text/xml',
            'User-Agent': 'Genesis Node.js client v' + config.module.version,
            'Authorization': 'Basic ' + Buffer.from(config.customer.username + ':' + config.customer.password).toString('base64')
          },
          timeout: Number(config.gateway.timeout),
          validateStatus: function(status) {
            return status >= 200 && status < 300;
          }
        };
      }

      initFormConfiguration() {
        return {
          method: this.METHOD_PUT,
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        };
      }

      getURLEnvironment() {
        if (config.gateway.testing) {
          return ENVIRONMENT_PREFIX_STAGING + '.';
        } else {
          return ENVIRONMENT_PREFIX_PRODUCTION;
        }
      }

      isValid() {
        // Sanitize the parameters
        this.sanitizeParams(this.params);
        this.validator = new Validator(this);
        return this.validator.isValid();
      }

      getErrors() {
        return this.validator.getErrors();
      }

      getValidationErrorResponse() {
        return {
          "status": "INVALID_INPUT",
          "message": "Please verify the transaction parameters and check input data for errors.",
          "response": this.getErrors()
        };
      }

      sanitizeParams(rawParams) {
        var _this;
        _this = this;
        return _.each(rawParams, function(value, field) {
          if (_.isArray(value) || _.isObject(value)) {
            _this.sanitizeParams(value);
          }
          if ((_.isEmpty(value) && ((!_.isNumber(value)) && (!_.isBoolean(value)))) || _.isNull(value)) {
            return delete rawParams[field];
          }
        });
      }

    };

    ENVIRONMENT_PREFIX_PRODUCTION = '';

    ENVIRONMENT_PREFIX_STAGING = 'staging';

    Request.prototype.METHOD_POST = 'POST';

    Request.prototype.METHOD_PUT = 'PUT';

    return Request;

  }).call(this);

  module.exports = Request;

}).call(this);
