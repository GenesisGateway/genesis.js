// Generated by CoffeeScript 2.7.0
(function() {

  /*
    Base Gateway Request - Build the Request and send it to the Network
  */
  var AxiosApi, Builder, Currency, Promise, Request, Validator, _, util;

  _ = require('underscore');

  AxiosApi = require('./networks/axios_api');

  Builder = require('./builder');

  Currency = require('./helpers/currency');

  Promise = require('bluebird');

  util = require('util');

  Validator = require('./transactions/validator');

  Request = (function() {
    class Request {
      constructor(params1, configuration, builderInterface = 'xml') {
        this.params = params1;
        this.builderInterface = builderInterface;
        this.builderContext = new Builder(this.builderInterface);
        this.configuration = configuration;
        this.network = new AxiosApi();
        this.currency = new Currency();
        this.validator = new Validator(this);
      }

      // Load Request Network configuration
      initConfiguration() {
        return this.loadBuilderInterface();
      }

      // Helper method
      // TODO: Request.setData should be removed
      setData(params1) {
        this.params = params1;
        return this;
      }

      // Accessor for @params
      getData() {
        return this.params;
      }

      // Build the Network request data based on specific Gateway Request
      getArguments() {
        return {
          trx: this.getTrxData(),
          url: this.getUrl()
        };
      }

      // Gateway Endpoint that each request defines
      getUrl() {
        return {
          app: '',
          path: '',
          token: ''
        };
      }

      // Payment transaction structure that each request defines along with given params
      getTrxData() {
        return {};
      }

      // Load Request Network options based on the Gateway endpoint requirements
      loadBuilderInterface() {
        switch (this.builderInterface) {
          case this.builderContext.XML:
            return this.initXmlConfiguration();
          case this.builderContext.FORM:
            return this.initFormConfiguration();
          case this.builderContext.JSON:
            return this.initJsonConfiguration();
          default:
            return this.initGetConfiguration();
        }
      }

      // Format and return the endpoint URL based on the transaction parameters
      formatUrl(params) {
        return util.format('%s://%s.%s/%s', this.configuration.getGatewayProtocol(), this.configuration.getSubDomain(params.app), this.configuration.getGatewayHostname(), params.token != null ? `${params.path}/${params.token}` : params.path);
      }

      // Send the Request to the Gateway
      send() {
        var params;
        if (!this.isValid()) {
          return Promise.reject(this.getValidationErrorResponse());
        }
        params = this.getArguments();
        this.network.prepareConfig(this.initConfiguration());
        return this.network.send(this.formatUrl(params.url), this.builderContext.getDocument(params.trx));
      }

      // Load XML Post Network Configuration
      initXmlConfiguration() {
        var options;
        options = Object.assign({
          method: this.METHOD_POST
        }, this.getDefaultNetworkOptions());
        options.headers = Object.assign(options.headers, {
          'Content-Type': 'text/xml'
        });
        return options;
      }

      // Load FORM Put Network Configuration
      initFormConfiguration() {
        var options;
        options = Object.assign({
          method: this.METHOD_PUT
        }, this.getDefaultNetworkOptions());
        options.headers = Object.assign(options.headers, {
          'Content-Type': 'application/x-www-form-urlencoded'
        });
        return options;
      }

      // Load JSON Post Network Configuration
      initJsonConfiguration() {
        var options;
        options = Object.assign({
          method: this.METHOD_POST
        }, this.getDefaultNetworkOptions());
        options.headers = Object.assign(options.headers, {
          'Content-Type': 'application/json'
        });
        return options;
      }

      // Load Get Network Configuration
      initGetConfiguration() {
        return Object.assign({
          method: this.METHOD_GET
        }, this.getDefaultNetworkOptions());
      }

      // Validate Request requirements
      isValid() {
        if (!this.validator.isValidConfig()) {
          return false;
        }
        // Sanitize the parameters
        this.sanitizeParams(this.params);
        if (!this.validator.isValid()) {
          return false;
        }
        return true;
      }

      // Provides validation errors
      getErrors() {
        return this.validator.getErrors();
      }

      // Provides consolidated error response upon error
      getValidationErrorResponse() {
        return {
          "status": "INVALID_INPUT",
          "message": "Please verify the transaction parameters and check input data for errors.",
          "response": this.getErrors()
        };
      }

      // Removes empty elements from the payment structure
      sanitizeParams(rawParams) {
        var _this;
        _this = this;
        return _.each(rawParams, function(value, field) {
          if (_.isArray(value) || _.isObject(value)) {
            _this.sanitizeParams(value);
          }
          if ((_.isEmpty(value) && ((!_.isNumber(value)) && (!_.isBoolean(value)))) || _.isNull(value)) {
            return delete rawParams[field];
          }
        });
      }

      // Default Request Network configuration
      getDefaultNetworkOptions() {
        return {
          headers: {
            'User-Agent': `Genesis Node.js client v${this.configuration.getVersion()}`,
            'Authorization': this.getAuthorizationHeader()
          },
          timeout: this.configuration.getGatewayTimeout()
        };
      }

      // Build Authorization header
      getAuthorizationHeader() {
        var credentials;
        credentials = `${this.configuration.getCustomerUsername()}:${this.configuration.getCustomerPassword()}`;
        return `Basic ${Buffer.from(credentials).toString('base64')}`;
      }

    };

    Request.prototype.METHOD_POST = 'POST';

    Request.prototype.METHOD_PUT = 'PUT';

    Request.prototype.METHOD_GET = 'GET';

    return Request;

  }).call(this);

  module.exports = Request;

}).call(this);
