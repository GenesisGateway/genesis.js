// Generated by CoffeeScript 2.7.0
(function() {
  var AxiosApi, Builders, Currency, Promise, Request, Response, Validator, _, https, util;

  _ = require('underscore');

  AxiosApi = require('./network/axios_api');

  Builders = require('./builders/builders');

  Currency = require('./helpers/currency');

  https = require('https');

  Promise = require('bluebird');

  Response = require('./response');

  util = require('util');

  Validator = require('./transactions/validator');

  Request = (function() {
    class Request {
      constructor(params1, configuration, builderInterface = 'xml') {
        this.params = params1;
        this.builderInterface = builderInterface;
        this.builderContext = new Builders(this.builderInterface);
        this.response = new Response();
        this.configuration = configuration;
        this.axiosApi = new AxiosApi();
        this.currency = new Currency();
        this.validator = new Validator(this);
      }

      initConfiguration() {
        return this.loadBuilderInterface();
      }

      setData(params1) {
        this.params = params1;
        return this;
      }

      getData() {
        return this.params;
      }

      getArguments() {
        return {
          trx: this.getTrxData(),
          url: this.getUrl()
        };
      }

      getUrl() {
        return {
          app: '',
          path: '',
          token: ''
        };
      }

      getTrxData() {}

      loadBuilderInterface() {
        switch (this.builderInterface) {
          case this.builderContext.XML:
            return this.initXmlConfiguration();
          case this.builderContext.FORM:
            return this.initFormConfiguration();
          default:
            return this.initGetConfiguration();
        }
      }

      /*
        Format and return the endpoint URL based on the transaction parameters
      */
      formatUrl(params) {
        return util.format('%s://%s.%s/%s', this.configuration.getGatewayProtocol(), this.configuration.getSubDomain(params.app), this.configuration.getGatewayHostname(), params.token != null ? `${params.path}/${params.token}` : params.path);
      }

      /*
        Send the transaction to the Gateway
      */
      send() {
        var data, params, requestConfig;
        if (!this.isValid()) {
          return Promise.reject(this.getValidationErrorResponse());
        }
        params = this.getArguments();
        requestConfig = this.initConfiguration(this.builderInterface);
        data = this.builderContext.getBuilder(params.trx);
        return this.axiosApi.request_query(this.formatUrl(params.url), requestConfig, data);
      }

      initXmlConfiguration() {
        var version;
        version = this.configuration.getVersion();
        return {
          method: this.METHOD_POST,
          httpsAgent: new https.Agent({
            rejectUnauthorized: true,
            maxVersion: "TLSv1.2",
            minVersion: "TLSv1.2"
          }),
          headers: {
            'Content-Type': 'text/xml',
            'User-Agent': 'Genesis Node.js client v' + version,
            'Authorization': this.getAuthorizationHeader()
          },
          timeout: Number(this.configuration.getGatewayTimeout()),
          validateStatus: function(status) {
            return status >= 200 && status < 300;
          }
        };
      }

      initFormConfiguration() {
        return {
          method: this.METHOD_PUT,
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        };
      }

      initGetConfiguration() {
        return {
          method: this.METHOD_GET,
          headers: {
            'User-Agent': 'Genesis Node.js client v' + this.configuration.getVersion(),
            'Authorization': this.getAuthorizationHeader()
          }
        };
      }

      isValid() {
        if (!this.validator.isValidConfig()) {
          return false;
        }
        // Sanitize the parameters
        this.sanitizeParams(this.params);
        if (!this.validator.isValid()) {
          return false;
        }
        return true;
      }

      getErrors() {
        return this.validator.getErrors();
      }

      getValidationErrorResponse() {
        return {
          "status": "INVALID_INPUT",
          "message": "Please verify the transaction parameters and check input data for errors.",
          "response": this.getErrors()
        };
      }

      sanitizeParams(rawParams) {
        var _this;
        _this = this;
        return _.each(rawParams, function(value, field) {
          if (_.isArray(value) || _.isObject(value)) {
            _this.sanitizeParams(value);
          }
          if ((_.isEmpty(value) && ((!_.isNumber(value)) && (!_.isBoolean(value)))) || _.isNull(value)) {
            return delete rawParams[field];
          }
        });
      }

      getAuthorizationHeader() {
        return 'Basic ' + Buffer.from(this.configuration.getCustomerUsername() + ':' + this.configuration.getCustomerPassword()).toString('base64');
      }

    };

    Request.prototype.METHOD_POST = 'POST';

    Request.prototype.METHOD_PUT = 'PUT';

    Request.prototype.METHOD_GET = 'GET';

    return Request;

  }).call(this);

  module.exports = Request;

}).call(this);
