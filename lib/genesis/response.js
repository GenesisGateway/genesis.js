// Generated by CoffeeScript 2.7.0
(function() {

  /*
    Response - process, format and filters incoming Gateway response provided by the Network
  */
  var Currency, Parser, Response;

  Parser = require('./parser');

  Currency = require('./helpers/currency');

  Response = (function() {
    var JSON_TYPE;

    class Response {
      constructor(network) {
        this.network = network;
        this.parser = this.initParser();
        this.responseObject = {};
        this.processResponse();
        this;
      }

      // Raw Response
      getResponseRaw() {
        return this.network.getResponseBody();
      }

      // HTTP Response Code
      getResponseCode() {
        return this.network.getResponseStatus();
      }

      // Response Headers
      getResponseHeaders() {
        return this.network.getResponseHeaders();
      }

      // Return parsed Response JSON Object
      getResponseObject() {
        return this.responseObject;
      }

      // Load the parser based on the Response Headers
      initParser(parserInterface) {
        var xmlParser;
        if (this.isResponseTypeJson(parserInterface)) {
          return new Parser(Parser.prototype.JSON_INTERFACE);
        }
        xmlParser = new Parser(Parser.prototype.XML_INTERFACE);
        xmlParser.skipRootNode();
        return xmlParser;
      }

      // Determine if the given response has application/json payload
      isResponseTypeJson() {
        return this.network.getResponseContentType().indexOf(JSON_TYPE) >= 0;
      }

      // Attempt to process response from Genesis Payment Gateway
      processResponse() {
        this.parser.parseDocument(this.getResponseRaw());
        this.responseObject = this.parser.getObject();
        return this.transformObject();
      }

      // Execute transformations on the Response Object
      transformObject() {
        return this.transformCurrency();
      }

      // Transform Currency inside the parsed Response Object
      transformCurrency() {
        var currency;
        if (this.responseObject.hasOwnProperty('amount') && this.responseObject.hasOwnProperty('currency')) {
          currency = this.initCurrency();
          this.responseObject.amount = currency.convertToNominalUnits(this.responseObject.amount, this.responseObject.currency);
        }
        return this;
      }

      // Initialize Currency helper used for response transformation
      initCurrency() {
        return new Currency();
      }

    };

    JSON_TYPE = 'application/json';

    return Response;

  }).call(this);

  module.exports = Response;

}).call(this);
