// Generated by CoffeeScript 2.7.0
(function() {
  var Base, Currency, Promise, Request, Validator, _;

  Request = require('../request');

  Currency = require('../helpers/currency');

  _ = require('underscore');

  Promise = require('bluebird');

  Validator = require('./validator');

  Base = class Base {
    constructor(params) {
      this.params = params;
      this.request = new Request();
      this.currency = new Currency();
    }

    setData(params) {
      this.params = params;
      return this;
    }

    getData() {
      if (typeof this.getTransactionType === "function" ? this.getTransactionType() : void 0) {
        return _.extend({}, this.params, {
          transaction_type: this.getTransactionType()
        });
      } else {
        return this.params;
      }
    }

    isValid() {
      // Sanitize the parameters
      this.sanitizeParams(this.params);
      this.validator = new Validator(this);
      return this.validator.isValid();
    }

    getErrors() {
      return this.validator.getErrors();
    }

    getValidationErrorResponse() {
      return {
        "status": "INVALID_INPUT",
        "message": "Please verify the transaction parameters and check input data for errors.",
        "response": this.getErrors()
      };
    }

    send() {
      var args;
      if (!this.isValid()) {
        return Promise.reject(this.getValidationErrorResponse());
      }
      args = {
        trx: this.getTrxData(),
        url: this.getUrl()
      };
      return this.request.send(args);
    }

    sanitizeParams(rawParams) {
      var _this;
      _this = this;
      return _.each(rawParams, function(value, field) {
        if (_.isArray(value) || _.isObject(value)) {
          _this.sanitizeParams(value);
        }
        if ((_.isEmpty(value) && ((!_.isNumber(value)) && (!_.isBoolean(value)))) || _.isNull(value)) {
          return delete rawParams[field];
        }
      });
    }

  };

  module.exports = Base;

}).call(this);
