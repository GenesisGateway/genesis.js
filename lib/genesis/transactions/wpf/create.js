// Generated by CoffeeScript 2.5.1
(function() {
  var AmountValidator, Base, Create, TransactionTypes, _, i18n, util;

  Base = require('../base');

  util = require('util');

  _ = require('underscore');

  AmountValidator = require('../../helpers/validators/amount_validator');

  TransactionTypes = require('../../helpers/transaction/types');

  i18n = require('../../helpers/i18n');

  Create = class Create extends Base {
    constructor(params) {
      super(params);
      // Set Locale
      this.setLocale();
      this.transactionTypes = new TransactionTypes();
      this.i18n = new i18n();
    }

    setLocale() {
      if (this.params && this.params.locale) {
        this.locale = this.params.locale.slice(0, 2);
      } else {
        this.locale = 'en';
      }
      if (this.params) {
        return delete this.params.locale;
      }
    }

    setData(params1) {
      this.params = params1;
      this.setLocale();
      return this;
    }

    isValid() {
      var i, len, ref, rules, type;
      this.validationErrors = [];
      rules = {
        'transaction_id': null,
        'amount': new AmountValidator(),
        'currency': this.currency.getCurrencies(),
        'notification_url': null,
        'return_success_url': null,
        'return_failure_url': null,
        'return_cancel_url': null,
        'transaction_types': null
      };
      if (!this.i18n.isValidLocale(this.locale)) {
        this.validationErrors.push(`Locale ${this.locale} is not valid. Valid WPF locales are: ${this.i18n.getLocales().join(', ')}`);
      }
      // validate transaction types
      if (this.params.transaction_types) {
        ref = this.params.transaction_types;
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          if (this.transactionTypes.isValidWPFType(type)) {
            rules = _.extend(rules, this.transactionTypes.getCustomRequiredParameters(type));
          } else {
            this.validationErrors.push(`Transaction type ${type} is not valid. Valid WPF transactions are: ${this.transactionTypes.getWPFTypes().join(', ')}`);
          }
        }
      }
      this.validateRequiredFields(_.keys(rules));
      this.validateFieldsValues(rules);
      return this.validationErrors.length === 0;
    }

    getUrl() {
      return {
        app: 'wpf',
        path: util.format('%s/wpf', this.locale)
      };
    }

    getTrxData() {
      return {
        'wpf_payment': _.extend(this.params, {
          'amount': this.currency.convertToMinorUnits(this.params.amount, this.params.currency),
          'transaction_types': {
            transaction_type: _.map(this.params.transaction_types, function(value) {
              return {
                "@": {
                  name: value.toString()
                }
              };
            })
          }
        })
      };
    }

  };

  module.exports = Create;

}).call(this);
