// Generated by CoffeeScript 2.7.0
(function() {
  var AmountValidator, Base, Create, TransactionTypes, _, i18n, util;

  Base = require('../base');

  util = require('util');

  _ = require('underscore');

  AmountValidator = require('../../helpers/validators/amount_validator');

  TransactionTypes = require('../../helpers/transaction/types');

  i18n = require('../../helpers/i18n');

  Create = (function() {
    var handleManagedRecurring, handleReminders;

    class Create extends Base {
      constructor(params) {
        super(params);
        // Set Locale
        this.setLocale();
        this.transactionTypes = new TransactionTypes();
        this.i18n = new i18n();
      }

      getTransactionType() {
        return 'wpf_create';
      }

      setLocale() {
        if (this.params && this.params.locale) {
          this.locale = this.params.locale.slice(0, 2);
        } else {
          this.locale = 'en';
        }
        if (this.params) {
          return this.params.locale = this.locale;
        }
      }

      setData(params1) {
        this.params = params1;
        this.setLocale();
        return this;
      }

      getUrl() {
        return {
          app: 'wpf',
          path: util.format('%s/wpf', this.locale)
        };
      }

      getTrxData() {
        var currency, params;
        currency = this.currency;
        params = this.params;
        // Locale is not inside the request data
        if (this.params) {
          delete this.params.locale;
        }
        handleReminders;
        return {
          'wpf_payment': _.extend(this.params, {
            'amount': this.currency.convertToMinorUnits(this.params.amount, this.params.currency),
            'transaction_types': {
              transaction_type: _.map(this.params.transaction_types, function(value) {
                var key;
                if (value instanceof Object) {
                  for (key in value) {
                    handleManagedRecurring(key, value[key], currency, params);
                    return Object.assign({
                      "@": {
                        name: key.toString()
                      }
                    }, value[key]);
                  }
                }
                return {
                  "@": {
                    name: value.toString()
                  }
                };
              })
            }
          })
        };
      }

    };

    handleReminders = function() {
      var reminders;
      if (this.params.reminders && this.params.pay_later !== null) {
        if (this.params.pay_later === true) {
          reminders = this.params.reminders;
          this.params.reminders = {};
          this.params.reminders.reminder = reminders;
        }
        if (this.params.pay_later === false) {
          delete this.params.reminder_language;
          return delete this.params.reminders;
        }
      }
    };

    handleManagedRecurring = function(key, value, currency, params) {
      var trxTypesWithManagedRecurring;
      trxTypesWithManagedRecurring = ['authorize', 'authorize3d', 'sale', 'sale3d', 'init_recurring_sale', 'init_recurring_sale3d'];
      if (trxTypesWithManagedRecurring.indexOf(key) >= 0) {
        if (value.managed_recurring) {
          if (value.managed_recurring.hasOwnProperty('amount')) {
            value.managed_recurring.amount = currency.convertToMinorUnits(value.managed_recurring.amount, params.currency);
          }
          if (value.managed_recurring.hasOwnProperty('max_amount')) {
            return value.managed_recurring.max_amount = currency.convertToMinorUnits(value.managed_recurring.max_amount, params.currency);
          }
        }
      }
    };

    return Create;

  }).call(this);

  module.exports = Create;

}).call(this);
