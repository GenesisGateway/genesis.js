// Generated by CoffeeScript 2.7.0
(function() {

  /*
    Financial transactions
  */
  /*
    CashPayment
  */
  /*
    Vouchers
  */
  /*
    Non Financial transactions
  */
  /*
    Financial mobile transactions
  */
  /*
    MethodContinue
  */
  /*
    Financial Alternative transactions
  */
  /*
    Direct Debit
  */
  /*
    Financial OBP transactions
  */
  /*
    Web Payment Form
  */
  var AfricanMobileSale, Alipay, ApplePay, Argencard, Aura, Authorize, Authorize3d, Avs, Baloto, BancoDeOccidente, BancoDoBrasil, Bancomer, Bancontact, Blacklist, Boleto, Bradesco, Cabal, Cancel, Capture, Cash, CashU, Cencosud, Chargeback, ChargebackByDate, Config, Credit, Davivienda, Efecty, FraudReport, FraudReportByDate, GooglePay, IDebitPayin, IDebitPayout, InitRecurringSale, InitRecurringSale3d, InstaDebitPayin, InstaDebitPayout, MethodContinue, MyBank, Naranja, Nativa, OnlineBankingPayin, OnlineBankingPayout, Oxxo, P24, PPRO, PagoFacil, PayPal, Payout, Paysafecard, Pix, Poli, Reconcile, ReconcileByDate, RecurringSale, Redpagos, Refund, Retrieval, RetrievalByDate, RussianMobileSale, Sale, Sale3d, SddInitRecurringSale, SddRecurringSale, SddRefund, SddSale, Sofort, TarjetaShopping, Transaction, TrustlySale, TrustlyWithdrawal, Wechat, WpfCreate, WpfReconcile;

  Config = require('./utils/configuration/config');

  Aura = require('./transactions/financial/cards/aura');

  Argencard = require('./transactions/financial/cards/argencard');

  Authorize = require('./transactions/financial/cards/authorize');

  Authorize3d = require('./transactions/financial/cards/authorize3d');

  Bancontact = require('./transactions/financial/cards/bancontact');

  Cabal = require('./transactions/financial/cards/cabal');

  Cencosud = require('./transactions/financial/cards/cencosud');

  Sale = require('./transactions/financial/cards/sale');

  Sale3d = require('./transactions/financial/cards/sale3d');

  Cancel = require('./transactions/financial/cancel');

  Payout = require('./transactions/financial/cards/payout');

  Credit = require('./transactions/financial/cards/credit');

  RecurringSale = require('./transactions/financial/cards/recurring/recurring_sale');

  InitRecurringSale = require('./transactions/financial/cards/recurring/init_recurring_sale');

  InitRecurringSale3d = require('./transactions/financial/cards/recurring/init_recurring_sale3d');

  Capture = require('./transactions/financial/capture');

  Refund = require('./transactions/financial/refund');

  Nativa = require('./transactions/financial/cards/nativa');

  Naranja = require('./transactions/financial/cards/naranja');

  TarjetaShopping = require('./transactions/financial/cards/tarjeta_shopping');

  Cash = require('./transactions/financial/cash_payments/cash');

  BancoDeOccidente = require('./transactions/financial/cash_payments/banco_de_occidente');

  Baloto = require('./transactions/financial/cash_payments/baloto');

  Boleto = require('./transactions/financial/cash_payments/boleto');

  Efecty = require('./transactions/financial/cash_payments/efecty');

  Oxxo = require('./transactions/financial/cash_payments/oxxo');

  PagoFacil = require('./transactions/financial/cash_payments/pago_facil');

  Pix = require('./transactions/financial/cash_payments/pix');

  Redpagos = require('./transactions/financial/cash_payments/redpagos');

  Chargeback = require('./transactions/non_financial/fraud/chargeback/chargeback');

  ChargebackByDate = require('./transactions/non_financial/fraud/chargeback/chargeback_by_date');

  Blacklist = require('./transactions/non_financial/blacklist');

  FraudReport = require('./transactions/non_financial/fraud/reports/fraud_report');

  FraudReportByDate = require('./transactions/non_financial/fraud/reports/fraud_report_by_date');

  Retrieval = require('./transactions/non_financial/fraud/retrieval/retrieval');

  RetrievalByDate = require('./transactions/non_financial/fraud/retrieval/retrieval_by_date');

  Reconcile = require('./transactions/non_financial/reconcile/reconcile');

  ReconcileByDate = require('./transactions/non_financial/reconcile/reconcile_by_date');

  Avs = require('./transactions/non_financial/avs');

  WpfCreate = require('./transactions/wpf/create');

  WpfReconcile = require('./transactions/wpf/reconcile');

  P24 = require('./transactions/financial/alternative/p24');

  Poli = require('./transactions/financial/alternative/poli');

  Paysafecard = require('./transactions/financial/alternative/paysafecard');

  Sofort = require('./transactions/financial/alternative/sofort');

  PPRO = require('./transactions/financial/alternative/ppro');

  TrustlySale = require('./transactions/financial/alternative/trustly/sale');

  TrustlyWithdrawal = require('./transactions/financial/alternative/trustly/withdrawal');

  Wechat = require('./transactions/financial/obp/wechat');

  Alipay = require('./transactions/financial/obp/alipay');

  IDebitPayin = require('./transactions/financial/obp/idebit/payin');

  IDebitPayout = require('./transactions/financial/obp/idebit/payout');

  InstaDebitPayin = require('./transactions/financial/obp/insta_debit/payin');

  InstaDebitPayout = require('./transactions/financial/obp/insta_debit/payout');

  OnlineBankingPayin = require('./transactions/financial/obp/online_banking/payin');

  OnlineBankingPayout = require('./transactions/financial/obp/online_banking/payout');

  MyBank = require('./transactions/financial/obp/my_bank');

  Bancomer = require('./transactions/financial/obp/bancomer');

  BancoDoBrasil = require('./transactions/financial/obp/banco_do_brasil');

  Bradesco = require('./transactions/financial/obp/bradesco');

  Davivienda = require('./transactions/financial/obp/davivienda');

  SddSale = require('./transactions/financial/direct_debit/sdd_sale');

  SddInitRecurringSale = require('./transactions/financial/direct_debit/sdd_init_recurring_sale');

  SddRecurringSale = require('./transactions/financial/direct_debit/sdd_recurring_sale');

  SddRefund = require('./transactions/financial/direct_debit/sdd_refund');

  GooglePay = require('./transactions/financial/mobile/google_pay');

  ApplePay = require('./transactions/financial/mobile/apple_pay');

  AfricanMobileSale = require('./transactions/financial/mobile/african_mobile_sale');

  PayPal = require('./transactions/financial/wallets/pay_pal');

  RussianMobileSale = require('./transactions/financial/mobile/russian_mobile_sale');

  CashU = require('./transactions/financial/vouchers/cashu');

  MethodContinue = require('./transactions/financial/cards/threeds/v2/method_continue');

  OnlineBankingPayin = require('./transactions/financial/obp/online_banking/payin');

  Transaction = class Transaction {
    constructor(configuration = null) {
      this.config = new Config(configuration);
    }

    /*
      Financial Alternative transactions
    */
    p24(params) {
      return new P24(params, this.config);
    }

    poli(params) {
      return new Poli(params, this.config);
    }

    paysafecard(params) {
      return new Paysafecard(params, this.config);
    }

    sofort(params) {
      return new Sofort(params, this.config);
    }

    ppro(params) {
      return new PPRO(params, this.config);
    }

    trustly_sale(params) {
      return new TrustlySale(params, this.config);
    }

    trustly_withdrawal(params) {
      return new TrustlyWithdrawal(params, this.config);
    }

    cashu(params) {
      return new CashU(params, this.config);
    }

    /*
      Financial transactions
    */
    aura(params) {
      return new Aura(params, this.config);
    }

    argencard(params) {
      return new Argencard(params, this.config);
    }

    authorize(params) {
      return new Authorize(params, this.config);
    }

    authorize3d(params) {
      return new Authorize3d(params, this.config);
    }

    bcmc(params) {
      return new Bancontact(params, this.config);
    }

    cabal(params) {
      return new Cabal(params, this.config);
    }

    cencosud(params) {
      return new Cencosud(params, this.config);
    }

    credit(params) {
      return new Credit(params, this.config);
    }

    init_recurring_sale(params) {
      return new InitRecurringSale(params, this.config);
    }

    init_recurring_sale3d(params) {
      return new InitRecurringSale3d(params, this.config);
    }

    recurring_sale(params) {
      return new RecurringSale(params, this.config);
    }

    payout(params) {
      return new Payout(params, this.config);
    }

    sale(params) {
      return new Sale(params, this.config);
    }

    sale3d(params) {
      return new Sale3d(params, this.config);
    }

    cancel(params) {
      return new Cancel(params, this.config);
    }

    // keep this for backward compatibility
    void(params) {
      return this.cancel(params, this.config);
    }

    capture(params) {
      return new Capture(params);
    }

    refund(params) {
      return new Refund(params, this.config);
    }

    method_continue(params) {
      return new MethodContinue(params, this.config);
    }

    nativa(params) {
      return new Nativa(params, this.config);
    }

    naranja(params) {
      return new Naranja(params, this.config);
    }

    tarjeta_shopping(params) {
      return new TarjetaShopping(params, this.config);
    }

    /*
      Cash Payments transactions
    */
    baloto(params) {
      return new Baloto(params, this.config);
    }

    banco_de_occidente(params) {
      return new BancoDeOccidente(params, this.config);
    }

    boleto(params) {
      return new Boleto(params, this.config);
    }

    cash(params) {
      return new Cash(params, this.config);
    }

    efecty(params) {
      return new Efecty(params, this.config);
    }

    oxxo(params) {
      return new Oxxo(params, this.config);
    }

    pago_facil(params) {
      return new PagoFacil(params, this.config);
    }

    pix(params) {
      return new Pix(params, this.config);
    }

    redpagos(params) {
      return new Redpagos(params, this.config);
    }

    /*
      Direct Debit
    */
    sdd_sale(params) {
      return new SddSale(params, this.config);
    }

    sdd_init_recurring_sale(params) {
      return new SddInitRecurringSale(params, this.config);
    }

    sdd_recurring_sale(params) {
      return new SddRecurringSale(params, this.config);
    }

    sdd_refund(params) {
      return new SddRefund(params, this.config);
    }

    /*
      Financial mobile transactions
    */
    google_pay(params) {
      return new GooglePay(params, this.config);
    }

    african_mobile_sale(params) {
      return new AfricanMobileSale(params, this.config);
    }

    apple_pay(params) {
      return new ApplePay(params, this.config);
    }

    russian_mobile_sale(params) {
      return new RussianMobileSale(params, this.config);
    }

    /*
      Financial OBP transactions
    */
    wechat(params) {
      return new Wechat(params, this.config);
    }

    alipay(params) {
      return new Alipay(params, this.config);
    }

    idebit_payin(params) {
      return new IDebitPayin(params, this.config);
    }

    idebit_payout(params) {
      return new IDebitPayout(params, this.config);
    }

    insta_debit_payin(params) {
      return new InstaDebitPayin(params, this.config);
    }

    insta_debit_payout(params) {
      return new InstaDebitPayout(params, this.config);
    }

    bradesco(params) {
      return new Bradesco(params, this.config);
    }

    davivienda(params) {
      return new Davivienda(params, this.config);
    }

    online_banking_payin(params) {
      return new OnlineBankingPayin(params, this.config);
    }

    online_banking_payout(params) {
      return new OnlineBankingPayout(params, this.config);
    }

    my_bank(params) {
      return new MyBank(params, this.config);
    }

    bancomer(params) {
      return new Bancomer(params, this.config);
    }

    banco_do_brasil(params) {
      return new BancoDoBrasil(params, this.config);
    }

    /*
      Financial Wallets transactions
    */
    pay_pal(params) {
      return new PayPal(params, this.config);
    }

    /*
      Non Financial transactions
    */
    blacklist(params) {
      return new Blacklist(params, this.config);
    }

    chargeback(params) {
      return new Chargeback(params, this.config);
    }

    chargeback_by_date(params) {
      return new ChargebackByDate(params, this.config);
    }

    fraud_report(params) {
      return new FraudReport(params, this.config);
    }

    fraud_report_by_date(params) {
      return new FraudReportByDate(params, this.config);
    }

    retrieval(params) {
      return new Retrieval(params, this.config);
    }

    retrieval_by_date(params) {
      return new RetrievalByDate(params, this.config);
    }

    reconcile(params) {
      return new Reconcile(params, this.config);
    }

    reconcile_by_date(params) {
      return new ReconcileByDate(params, this.config);
    }

    avs(params) {
      return new Avs(params, this.config);
    }

    /*
      Web Payment Form
    */
    wpf_create(params) {
      return new WpfCreate(params, this.config);
    }

    wpf_reconcile(params) {
      return new WpfReconcile(params, this.config);
    }

  };

  module.exports = Transaction;

}).call(this);
