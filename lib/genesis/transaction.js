// Generated by CoffeeScript 2.7.0
(function() {
  /*
    Financial transactions
  */
  /*
    Non Financial transactions
  */
  /*
    Vouchers
  */
  /*
    Financial mobile transactions
  */
  /*
    MethodContinue
  */
  /*
    Financial Alternative transactions
  */
  /*
    Financial OBP transactions
  */
  /*
    Direct Debit
  */
  /*
    Web Payment Form
  */
  var AccountVerification, Alipay, ApplePay, Authorize, Authorize3d, Avs, Blacklist, Cancel, Capture, CashU, Chargeback, ChargebackByDate, Credit, FraudReport, FraudReportByDate, GooglePay, IDebitPayin, IDebitPayout, InitRecurringSale, InitRecurringSale3d, InstaDebitPayin, InstaDebitPayout, MethodContinue, P24, PPRO, PayPal, PaySecPayin, PaySecPayout, Payout, Paysafecard, Poli, Reconcile, ReconcileByDate, RecurringSale, Refund, Retrieval, RetrievalByDate, Sale, Sale3d, SddInitRecurringSale, SddRecurringSale, SddRefund, SddSale, Sofort, Transaction, TrustlySale, TrustlyWithdrawal, Wechat, WpfCreate, WpfReconcile;

  Authorize = require('./transactions/financial/cards/authorize');

  Authorize3d = require('./transactions/financial/cards/authorize3d');

  Sale = require('./transactions/financial/cards/sale');

  Sale3d = require('./transactions/financial/cards/sale3d');

  Cancel = require('./transactions/financial/cancel');

  Payout = require('./transactions/financial/cards/payout');

  Credit = require('./transactions/financial/cards/credit');

  RecurringSale = require('./transactions/financial/cards/recurring/recurring_sale');

  InitRecurringSale = require('./transactions/financial/cards/recurring/init_recurring_sale');

  InitRecurringSale3d = require('./transactions/financial/cards/recurring/init_recurring_sale3d');

  Capture = require('./transactions/financial/capture');

  Refund = require('./transactions/financial/refund');

  AccountVerification = require('./transactions/non_financial/account_verification');

  Chargeback = require('./transactions/non_financial/fraud/chargeback/chargeback');

  ChargebackByDate = require('./transactions/non_financial/fraud/chargeback/chargeback_by_date');

  Blacklist = require('./transactions/non_financial/blacklist');

  FraudReport = require('./transactions/non_financial/fraud/reports/fraud_report');

  FraudReportByDate = require('./transactions/non_financial/fraud/reports/fraud_report_by_date');

  Retrieval = require('./transactions/non_financial/fraud/retrieval/retrieval');

  RetrievalByDate = require('./transactions/non_financial/fraud/retrieval/retrieval_by_date');

  Reconcile = require('./transactions/non_financial/reconcile/reconcile');

  ReconcileByDate = require('./transactions/non_financial/reconcile/reconcile_by_date');

  Avs = require('./transactions/non_financial/avs');

  WpfCreate = require('./transactions/wpf/create');

  WpfReconcile = require('./transactions/wpf/reconcile');

  P24 = require('./transactions/financial/alternative/p24');

  Poli = require('./transactions/financial/alternative/poli');

  Paysafecard = require('./transactions/financial/alternative/paysafecard');

  Sofort = require('./transactions/financial/alternative/sofort');

  PPRO = require('./transactions/financial/alternative/ppro');

  TrustlySale = require('./transactions/financial/alternative/trustly/sale');

  TrustlyWithdrawal = require('./transactions/financial/alternative/trustly/withdrawal');

  PaySecPayin = require('./transactions/financial/obp/paysec/payin');

  PaySecPayout = require('./transactions/financial/obp/paysec/payout');

  Wechat = require('./transactions/financial/obp/wechat');

  Alipay = require('./transactions/financial/obp/alipay');

  IDebitPayin = require('./transactions/financial/obp/idebit/payin');

  IDebitPayout = require('./transactions/financial/obp/idebit/payout');

  InstaDebitPayin = require('./transactions/financial/obp/insta_debit/payin');

  InstaDebitPayout = require('./transactions/financial/obp/insta_debit/payout');

  SddSale = require('./transactions/financial/direct_debit/sdd_sale');

  SddInitRecurringSale = require('./transactions/financial/direct_debit/sdd_init_recurring_sale');

  SddRecurringSale = require('./transactions/financial/direct_debit/sdd_recurring_sale');

  SddRefund = require('./transactions/financial/direct_debit/sdd_refund');

  GooglePay = require('./transactions/financial/mobile/google_pay');

  ApplePay = require('./transactions/financial/mobile/apple_pay');

  PayPal = require('./transactions/financial/wallets/pay_pal');

  CashU = require('./transactions/financial/vouchers/cashu');

  MethodContinue = require('./transactions/financial/cards/threeds/v2/method_continue');

  Transaction = class Transaction {
    /*
      Non Financial transactions
    */
    account_verification(params) {
      return new AccountVerification(params);
    }

    blacklist(params) {
      return new Blacklist(params);
    }

    chargeback(params) {
      return new Chargeback(params);
    }

    chargeback_by_date(params) {
      return new ChargebackByDate(params);
    }

    fraud_report(params) {
      return new FraudReport(params);
    }

    fraud_report_by_date(params) {
      return new FraudReportByDate(params);
    }

    retrieval(params) {
      return new Retrieval(params);
    }

    retrieval_by_date(params) {
      return new RetrievalByDate(params);
    }

    reconcile(params) {
      return new Reconcile(params);
    }

    reconcile_by_date(params) {
      return new ReconcileByDate(params);
    }

    avs(params) {
      return new Avs(params);
    }

    /*
      Financial transactions
    */
    authorize(params) {
      return new Authorize(params);
    }

    authorize3d(params) {
      return new Authorize3d(params);
    }

    credit(params) {
      return new Credit(params);
    }

    init_recurring_sale(params) {
      return new InitRecurringSale(params);
    }

    init_recurring_sale3d(params) {
      return new InitRecurringSale3d(params);
    }

    recurring_sale(params) {
      return new RecurringSale(params);
    }

    payout(params) {
      return new Payout(params);
    }

    sale(params) {
      return new Sale(params);
    }

    sale3d(params) {
      return new Sale3d(params);
    }

    cancel(params) {
      return new Cancel(params);
    }

    // keep this for backward compatibility
    void(params) {
      return this.cancel(params);
    }

    capture(params) {
      return new Capture(params);
    }

    refund(params) {
      return new Refund(params);
    }

    method_continue(params) {
      return new MethodContinue(params);
    }

    /*
      Financial Alternative transactions
    */
    p24(params) {
      return new P24(params);
    }

    poli(params) {
      return new Poli(params);
    }

    paysafecard(params) {
      return new Paysafecard(params);
    }

    sofort(params) {
      return new Sofort(params);
    }

    ppro(params) {
      return new PPRO(params);
    }

    trustly_sale(params) {
      return new TrustlySale(params);
    }

    trustly_withdrawal(params) {
      return new TrustlyWithdrawal(params);
    }

    cashu(params) {
      return new CashU(params);
    }

    /*
      Financial OBP transactions
    */
    paysec(params) {
      return new PaySecPayin(params);
    }

    paysec_payout(params) {
      return new PaySecPayout(params);
    }

    wechat(params) {
      return new Wechat(params);
    }

    alipay(params) {
      return new Alipay(params);
    }

    idebit_payin(params) {
      return new IDebitPayin(params);
    }

    idebit_payout(params) {
      return new IDebitPayout(params);
    }

    insta_debit_payin(params) {
      return new InstaDebitPayin(params);
    }

    insta_debit_payout(params) {
      return new InstaDebitPayout(params);
    }

    /*
      Direct Debit
    */
    sdd_sale(params) {
      return new SddSale(params);
    }

    sdd_init_recurring_sale(params) {
      return new SddInitRecurringSale(params);
    }

    sdd_recurring_sale(params) {
      return new SddRecurringSale(params);
    }

    sdd_refund(params) {
      return new SddRefund(params);
    }

    /*
      Web Payment Form
    */
    wpf_create(params) {
      return new WpfCreate(params);
    }

    wpf_reconcile(params) {
      return new WpfReconcile(params);
    }

    /*
      Financial mobile transactions
    */
    google_pay(params) {
      return new GooglePay(params);
    }

    apple_pay(params) {
      return new ApplePay(params);
    }

    /*
      Financial Wallets transactions
    */
    pay_pal(params) {
      return new PayPal(params);
    }

  };

  module.exports = Transaction;

}).call(this);
